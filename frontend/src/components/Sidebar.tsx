import { Layout, Menu } from "antd";
import type { MenuProps } from "antd";
import { Outlet, useNavigate, useLocation } from "react-router-dom";
import { PlusOutlined } from "@ant-design/icons";
import { useEffect, useMemo, useState } from "react";

const { Sider } = Layout;
type GroupItem = Required<MenuProps>["items"][number];

const items: GroupItem[] = [
  {
    key: "/home",
    label: "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å",
  },
  {
    key: "/request",
    label: "‡∏£‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡πÄ‡∏Å‡∏°",
  },
  {
    key: "/requestinfo",
    label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™",
  },
  {
    key: "/information",
    label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°",
    children: [
      { key: "/information/Add", label: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Å‡∏°", icon: <PlusOutlined /> },
      { key: "/information/Edit", label: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°", icon: <PlusOutlined /> },
    ],
  },
  {
    key: "/category",
    label: "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà",
    children: [
      { key: "/category/Community", label: "‡∏ä‡∏∏‡∏°‡∏ä‡∏ô", icon: <PlusOutlined /> },
      { key: "/category/Payment", label: "‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", icon: <PlusOutlined /> },
    ],
  },

  // üëá ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role)
  {
    key: "/roles",
    label: "‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó (Role)",
  },

  {
    key: "/workshop",
    label: "Workshop",
  },
];

const Sidebar = () => {
  const navigate = useNavigate();
  const location = useLocation();

  // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏•‡∏∏‡πà‡∏°" (‡∏°‡∏µ children)
  const rootSubmenuKeys = useMemo(() => ["/information", "/category"], []);

  // ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà (‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
  const selectedKey = location.pathname;

  const computeOpenKeys = (path: string) =>
    rootSubmenuKeys.filter((k) => path.startsWith(k));

  const [openKeys, setOpenKeys] = useState<string[]>(computeOpenKeys(selectedKey));

  useEffect(() => {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏¢‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    setOpenKeys(computeOpenKeys(selectedKey));
  }, [selectedKey]);

  const onOpenChange: MenuProps["onOpenChange"] = (keys) => {
    // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ logic ‡πÅ‡∏ö‡∏ö antd ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)
    setOpenKeys(keys as string[]);
  };

  return (
    <Layout style={{ minHeight: "100vh" }}>
      <Sider theme="dark" width={220}>
        <div
          style={{
            color: "#9254de",
            fontSize: 20,
            textAlign: "center",
            padding: "16px 0",
            fontWeight: 600,
          }}
        >
          GAME STORE
        </div>

        <Menu
          theme="dark"
          mode="inline"
          items={items}
          selectedKeys={[selectedKey]}
          openKeys={openKeys}
          onOpenChange={onOpenChange}
          onClick={({ key }) => navigate(String(key))}
        />
      </Sider>

      {/* ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å */}
      <Outlet />
    </Layout>
  );
};

export default Sidebar;
