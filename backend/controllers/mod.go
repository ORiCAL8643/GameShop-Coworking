package controllers

import (
	"fmt"
	"net/http"
	"os"
	"path" // ‡πÉ‡∏ä‡πâ‡∏ó‡∏≥ web path (forward slash)
	"path/filepath"
	"strconv"
	"time"

	"example.com/sa-gameshop/configs"
	"example.com/sa-gameshop/entity"
	"github.com/gin-gonic/gin"
)

// GET /mods?game_id=&uploader_id=&q=
func GetMods(c *gin.Context) {
	var mods []entity.Mod

	q := configs.DB().Model(&entity.Mod{})

	if gid := c.Query("game_id"); gid != "" {
		q = q.Where("game_id = ?", gid)
	}
	if uid := c.Query("uploader_id"); uid != "" {
		q = q.Where("user_id = ?", uid) // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡∏ú‡∏π‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
	}
	if s := c.Query("q"); s != "" {
		like := "%" + s + "%"
		q = q.Where("title LIKE ? OR description LIKE ?", like, like)
	}

	if err := q.Find(&mods).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, mods)
}

// GET /mods/:id
func GetModById(c *gin.Context) {
	id := c.Param("id")
	var mod entity.Mod
	if tx := configs.DB().Where("id = ?", id).First(&mod); tx.RowsAffected == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "mod not found"})
		return
	}
	c.JSON(http.StatusOK, mod)
}

// ‚úÖ GET /mods/mine?game_id=   (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡∏Å‡∏•‡∏∏‡πà‡∏° AuthRequired())
func GetMyMods(c *gin.Context) {
	uidAny, ok := c.Get("userID")
	if !ok {
		c.JSON(http.StatusUnauthorized, gin.H{"error": "unauthorized"})
		return
	}
	uid := uidAny.(uint)

	var mods []entity.Mod
	q := configs.DB().Model(&entity.Mod{}).Where("user_id = ?", uid)

	if gid := c.Query("game_id"); gid != "" {
		q = q.Where("game_id = ?", gid)
	}
	if s := c.Query("q"); s != "" {
		like := "%" + s + "%"
		q = q.Where("title LIKE ? OR description LIKE ?", like, like)
	}

	if err := q.Find(&mods).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, mods)
}

// POST /mods
// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user_game_id ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user_id ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ñ‡πâ‡∏≤ route ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ AuthRequired)
// ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢ endpoint ‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° AuthRequired() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ userID ‡πÄ‡∏™‡∏°‡∏≠
func CreateMod(c *gin.Context) {
	title := c.PostForm("title")
	if title == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "title is required"})
		return
	}
	description := c.PostForm("description")

	// ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ game_id
	gameIDStr := c.PostForm("game_id")
	if gameIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "game_id is required"})
		return
	}
	gameID64, err := strconv.ParseUint(gameIDStr, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid game_id"})
		return
	}
	gameID := uint(gameID64)

	// üü° OPTIONAL: user_game_id (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
	var userGameID *uint = nil
	if userGameIDStr := c.PostForm("user_game_id"); userGameIDStr != "" {
		if ugid64, err := strconv.ParseUint(userGameIDStr, 10, 64); err == nil {
			ugid := uint(ugid64)
			userGameID = &ugid
		}
	}

	// ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏°‡πá‡∏≠‡∏î‡πÄ‡∏™‡∏°‡∏≠
	modFile, err := c.FormFile("file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "mod file is required"})
		return
	}

	// üü° OPTIONAL: ‡∏£‡∏π‡∏õ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡πá‡∏≠‡∏î
	imageFile, _ := c.FormFile("image")

	// ---------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡πá‡∏≠‡∏î (disk path) ----------
	modFilename := fmt.Sprintf("%d_%s", time.Now().UnixNano(), modFile.Filename)
	modDirFS := filepath.Join("uploads", "mods")
	if err := os.MkdirAll(modDirFS, os.ModePerm); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to create mod directory"})
		return
	}
	modPathFS := filepath.Join(modDirFS, modFilename)
	if err := c.SaveUploadedFile(modFile, modPathFS); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to save mod file"})
		return
	}
	// ‚úÖ web path (forward slash)
	modPathWeb := path.Join("uploads", "mods", modFilename)

	// ---------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ----------
	imagePathWeb := ""
	if imageFile != nil {
		imgFilename := fmt.Sprintf("%d_%s", time.Now().UnixNano(), imageFile.Filename)
		imgDirFS := filepath.Join("uploads", "mod_images")
		if err := os.MkdirAll(imgDirFS, os.ModePerm); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to create image directory"})
			return
		}
		imgPathFS := filepath.Join(imgDirFS, imgFilename)
		if err := c.SaveUploadedFile(imageFile, imgPathFS); err != nil {
			c.JSON(http.StatusInternalServerError, gin.H{"error": "failed to save image"})
			return
		}
		imagePathWeb = path.Join("uploads", "mod_images", imgFilename)
	}

	// ‚úÖ ‡∏Ñ‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö AuthRequired() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ userID ‡πÄ‡∏™‡∏°‡∏≠)
	var uploaderID uint
	if uidAny, ok := c.Get("userID"); ok {
		if u, okC := uidAny.(uint); okC && u > 0 {
			uploaderID = u
		}
	}
	// ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á ‚Äú‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‚Äù ‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≤‡∏¢ endpoint ‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ï‡πâ AuthRequired() ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÄ‡∏ä‡πá‡∏Ñ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:
	// if uploaderID == 0 { c.JSON(http.StatusUnauthorized, gin.H{"error":"please login first"}); return }

	// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° record (‡πÄ‡∏Å‡πá‡∏ö web path ‡∏•‡∏á DB)
	mod := entity.Mod{
		Title:       title,
		Description: description,
		UploadDate:  time.Now(), // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ gorm.Model.CreatedAt ‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ
		FilePath:    modPathWeb,
		ImagePath:   imagePathWeb,
		Status:      "pending",
		GameID:      gameID,
		UserID:      uploaderID, // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
	}
	if userGameID != nil {
		mod.UserGameID = userGameID
	}

	if err := configs.DB().Create(&mod).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusCreated, mod)
}

// PATCH /mods/:id
func UpdateMod(c *gin.Context) {
	id := c.Param("id")

	var mod entity.Mod
	if tx := configs.DB().Where("id = ?", id).First(&mod); tx.RowsAffected == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "mod not found"})
		return
	}

	// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö JSON (‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠)
	var input entity.Mod
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// üü° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ path/‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï
	// input.FilePath = ""
	// input.ImagePath = ""
	// input.Status = ""

	if err := configs.DB().Model(&mod).Updates(input).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	if err := configs.DB().Where("id = ?", id).First(&mod).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, mod)
}

// DELETE /mods/:id
func DeleteMod(c *gin.Context) {
	id := c.Param("id")

	// üü° OPTIONAL: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö (‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	// uidAny, _ := c.Get("userID")
	// if !canDelete(uidAny, id) { c.JSON(http.StatusForbidden, gin.H{"error":"forbidden"}); return }

	if tx := configs.DB().Exec("DELETE FROM mods WHERE id = ?", id); tx.RowsAffected == 0 {
		c.JSON(http.StatusNotFound, gin.H{"error": "mod not found"})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "deleted successfully"})
}