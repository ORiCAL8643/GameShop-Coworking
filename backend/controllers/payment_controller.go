// controllers/payment_controller.go
package controllers

import (
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"time"

	"example.com/sa-gameshop/configs"
	"example.com/sa-gameshop/entity"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

func baseURL(c *gin.Context) string {
	scheme := "http"
	if c.Request.TLS != nil {
		scheme = "https"
	}
	return scheme + "://" + c.Request.Host
}

// ============================
// POST /payments
// multipart/form-data: order_id, file
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô UNDER_REVIEW
// ============================
func CreatePayment(c *gin.Context) {
	orderIDStr := c.PostForm("order_id")
	if orderIDStr == "" {
		c.JSON(http.StatusBadRequest, gin.H{"error": "order_id is required"})
		return
	}
	oid, err := strconv.Atoi(orderIDStr)
	if err != nil || oid <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid order_id"})
		return
	}

	file, err := c.FormFile("file")
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "payment slip file is required"})
		return
	}

	db := configs.DB()

	// ‡πÇ‡∏´‡∏•‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
	var ord entity.Order
	if err := db.Preload("User").First(&ord, oid).Error; err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "order not found"})
		return
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	_ = os.MkdirAll("uploads/slips", 0755)

	// ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
	dstName := fmt.Sprintf("slips/order_%d_%d%s", ord.ID, time.Now().UnixNano(), filepath.Ext(file.Filename))
	dstPath := filepath.Join("uploads", dstName) // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô path ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
	if err := c.SaveUploadedFile(file, dstPath); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "save slip failed"})
		return
	}

	// ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÉ‡∏´‡πâ‡∏ù‡∏±‡πà‡∏á server ‡πÄ‡∏õ‡πá‡∏ô truth)
	amount := ord.TotalAmount

	p := entity.Payment{
		OrderID:      ord.ID,
		Amount:       amount,
		SlipPath:     dstName, // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ï‡πâ /uploads
		Status:       entity.PaymentStatus("PENDING"),
		RejectReason: nil,
		UploadedAt:   time.Now(),
	}

	// ‡πÉ‡∏ä‡πâ transaction ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πâ‡∏≤‡∏á
	if err := db.Transaction(func(tx *gorm.DB) error {
		if err := tx.Create(&p).Error; err != nil {
			return err
		}
		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
		ord.OrderStatus = entity.OrderStatus("UNDER_REVIEW")
		if err := tx.Save(&ord).Error; err != nil {
			return err
		}
		return nil
	}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "create payment failed"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"id":           p.ID,
		"order_id":     p.OrderID,
		"amount":       p.Amount,
		"status":       string(p.Status),
		"reject_reason": p.RejectReason,
		"slip_url":     baseURL(c) + "/uploads/" + p.SlipPath,
		"uploaded_at":  p.UploadedAt,
	})
}

// ============================
// GET /payments?status=PENDING|APPROVED|REJECTED
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ AdminPaymentReview
// ============================
type adminPaymentDTO struct {
	ID          string  `json:"id"`
	OrderNo     string  `json:"order_no"`
	UserName    string  `json:"user_name"`
	Amount      float64 `json:"amount"`
	SlipURL     string  `json:"slip_url"`
	UploadedAt  string  `json:"uploaded_at"`
	Status      string  `json:"status"`
	RejectReason *string `json:"reject_reason,omitempty"`
	// ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡πá‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ)
	OrderStatus string `json:"order_status,omitempty"`
}

func FindPayments(c *gin.Context) {
	db := configs.DB()
	statusQ := c.Query("status") // optional

	var rows []entity.Payment
	q := db.Preload("Order").Preload("Order.User").Order("uploaded_at DESC")
	if statusQ != "" {
		q = q.Where("status = ?", statusQ)
	}
	if err := q.Find(&rows).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "query payments failed"})
		return
	}

	out := make([]adminPaymentDTO, 0, len(rows))
	for _, p := range rows {
		orderNo := fmt.Sprintf("ORD-%d", p.OrderID)
		userName := ""
		if p.Order.ID != 0 && p.Order.User.ID != 0 {
			userName = p.Order.User.Username
			if userName == "" {
				userName = fmt.Sprintf("User#%d", p.Order.User.ID)
			}
		}
		out = append(out, adminPaymentDTO{
			ID:           fmt.Sprintf("%d", p.ID),
			OrderNo:      orderNo,
			UserName:     userName,
			Amount:       p.Amount,
			SlipURL:      baseURL(c) + "/uploads/" + p.SlipPath,
			UploadedAt:   p.UploadedAt.Format(time.RFC3339),
			Status:       string(p.Status),                 // üëà ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î custom ‚Üí string
			RejectReason: p.RejectReason,
			OrderStatus:  string(p.Order.OrderStatus),      // üëà ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î custom ‚Üí string
		})
	}

	c.JSON(http.StatusOK, out)
}

// ============================
// PATCH /payments/:id
// body: { "status": "APPROVED" | "REJECTED", "reject_reason": "..."? }
// - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ payment
// - ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ order ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
// ============================
type patchPaymentBody struct {
	Status       *string `json:"status"`
	RejectReason *string `json:"reject_reason"`
}

func UpdatePayment(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil || id <= 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid id"})
		return
	}

	var body patchPaymentBody
	if err := c.ShouldBindJSON(&body); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "bad request body"})
		return
	}
	if body.Status == nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "status is required"})
		return
	}

	db := configs.DB()
	var p entity.Payment
	if err := db.Preload("Order").First(&p, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "payment not found"})
		return
	}

	newStatus := *body.Status
	switch newStatus {
	case "APPROVED":
		// ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
		err = db.Transaction(func(tx *gorm.DB) error {
			p.Status = entity.PaymentStatus("APPROVED")
			p.RejectReason = nil
			if err := tx.Save(&p).Error; err != nil {
				return err
			}
			// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡πâ "PAID" (‡∏´‡∏£‡∏∑‡∏≠ FULFILLED ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
			p.Order.OrderStatus = entity.OrderStatus("PAID")
			if err := tx.Save(&p.Order).Error; err != nil {
				return err
			}
			// TODO: ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏Å‡∏°/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô UserGame ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÉ‡∏ô transaction ‡∏ô‡∏µ‡πâ
			return nil
		})
	case "REJECTED":
		err = db.Transaction(func(tx *gorm.DB) error {
			p.Status = entity.PaymentStatus("REJECTED")
			p.RejectReason = body.RejectReason // pointer ‚Üí pointer (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
			if err := tx.Save(&p).Error; err != nil {
				return err
			}
			// ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô (‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡∏∏‡∏ì ‡∏à‡∏∞ WAITING_PAYMENT ‡∏´‡∏£‡∏∑‡∏≠ CANCELLED)
			p.Order.OrderStatus = entity.OrderStatus("WAITING_PAYMENT")
			if err := tx.Save(&p.Order).Error; err != nil {
				return err
			}
			return nil
		})
	case "PENDING":
		err = db.Transaction(func(tx *gorm.DB) error {
			p.Status = entity.PaymentStatus("PENDING")
			// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
			p.RejectReason = nil
			if err := tx.Save(&p).Error; err != nil {
				return err
			}
			p.Order.OrderStatus = entity.OrderStatus("UNDER_REVIEW")
			if err := tx.Save(&p.Order).Error; err != nil {
				return err
			}
			return nil
		})
	default:
		c.JSON(http.StatusBadRequest, gin.H{"error": "invalid status"})
		return
	}

	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "update failed"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"id":            p.ID,
		"status":        string(p.Status),
		"reject_reason": p.RejectReason,
		"order_id":      p.OrderID,
		"order_status":  string(p.Order.OrderStatus),
	})
}

// ============================
// (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÉ‡∏´‡πâ /payments/:id/approve ‡πÅ‡∏•‡∏∞ /payments/:id/reject
// ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ UpdatePayment ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
// ============================
func ApprovePayment(c *gin.Context) {
	c.Params = append(c.Params, gin.Param{Key: "status", Value: "APPROVED"})
	var body patchPaymentBody
	body.Status = strPtr("APPROVED")
	c.Set("forceBody", body)
	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å UpdatePayment ‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á
	updateWithInjectedBody(c, body)
}

func RejectPayment(c *gin.Context) {
	var b struct {
		RejectReason *string `json:"reject_reason"`
	}
	if err := c.ShouldBindJSON(&b); err != nil {
		// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á JSON ‡∏°‡∏≤‡∏Å‡πá‡πÉ‡∏´‡πâ reject ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÑ‡∏î‡πâ (‡πÄ‡∏õ‡πá‡∏ô nil)
	}
	body := patchPaymentBody{Status: strPtr("REJECTED"), RejectReason: b.RejectReason}
	updateWithInjectedBody(c, body)
}

// helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å UpdatePayment ‡∏î‡πâ‡∏ß‡∏¢ body ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ
func updateWithInjectedBody(c *gin.Context, body patchPaymentBody) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏î body ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        c.Request.Method = http.MethodPatch
        UpdatePayment(c.Copy())
}

func strPtr(s string) *string { return &s }
